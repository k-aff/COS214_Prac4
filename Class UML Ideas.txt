Component 1: Composite

Client: 

Component: FarmUnit
-Attributes: 
protected: 
type : string, 
capacity : int, 
amount : int, 
soilState : SoilState

-Functions: 
public: (all pure virtual)
getTotalCapacity() : int, 
getCropType() : string, 
getSoilStateName() : 
add(FarmUnit)
remove(FarmUnit)
? getChild()
//from observer 
getState() : State*
setState()

Composite: FarmLand
-Attributes:
children : FarmUnit
-Functions:
getTotalCapacity() : int, 
getCropType() : string, 
getSoilStateName() : 
add(FarmUnit)
remove(FarmUnit)
? getChild()

Leaf: CropField & Barn 
-Attributes:
-Functions:
getTotalCapacity() : int, 
getCropType() : string, 
getSoilStateName() : 
add(FarmUnit)
remove(FarmUnit)
? getChild()

Component 2: State

Context: FarmUnit (from Component 1)

State: SoilState (abstract)
-functions: 
 pure virtual harvestCrops(): Harvest crops based on the current soil state.
 rain(): Simulate rainfall that may change the soil state.
 getName(): Return the name of the soil state (e.g., "Dry", "Fruitful")

ConcreteStates: DrySoil, FruitfulSoil, FloodedSoil
-functions harvestCrops()
 • DrySoil: Yields minimal (x1) crops.
 • FruitfulSoil: Yields x3 crops.
 • FloodedSoil: Prevents further crop growth


Component 3: Decorator

Component: FarmUnit

ConcreteComponents: CropField & Barn 

Decorator: Decorator (abstract)
-attributes: 
component : FarmUnit

ConcreteDecorators: AddFertilizer, AddBarn
 AddFertilizer
-attributes
 state : SoilState
-functions:
 increaseProduction(): 
 harvest():

AddBarn
-attributes
??
-functions
getLeftoverCapacity()

Component 4: Observer

Subject: FarmUnit
-attributes: 
observerList : Truck
-functions
buyTrack(Truck)
sellTruck(Truck)
callTruck 

ConcreteSubject: CropField, Barn (??)



Observer: Truck (abstract)
-functions 
startEngine() (pure virtual)

ConcreteObserver: FertilizerTruck, DeliveryTruck
-attributes
observerState : SoilState
subject : (CropField / Barn) 

-functions
startEngine()


Component 5: Iterator 

Client: 

Iterator: (abstract)
-functions (pure virtual)
 • firstFarm(): Return the first farm for traversal.
 • next(): Move to the next farm in the traversal.
 • isDone(): Check if traversal is complete.
 • currentFarm(): Resturns current farm

ConcreteIterator: 
 • firstFarm(): Return the first farm for traversal.
 • next(): Move to the next farm in the traversal.
 • isDone(): Check if traversal is complete.
 • currentFarm(): Resturns current farm

Aggregate: Traversal (abstract)
-functions (pure virtual) 
concreteIterator() : Iterator* 

ConcreteAggregate: BFT, DFT 
-functions
concreteIterator() : Iterator* 